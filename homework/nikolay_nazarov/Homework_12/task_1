# Что такое тестирование ПО?
Тестирование ПО (Software Testing) - проверка соответствия между реальным и ожидаемым поведением программы, с помощью конечного набора тестов.

# Этапы SDLC, что значит каждый из них

Жизненный цикл разработки ПО (англ. SDLC – Software development lifecycle) – это серия из шести фаз,
через которые проходит любая программная система.

1. Сбор и анализ требований (Planning and Requirement Analysis).
Во время данного этапа собирается вся необходимая информация у клиента для разработки продукта соответствующего его ожиданиями.
Все двусмысленности должны быть устранены во время данного этапа.
Бизнес аналитик и Менеджер проекта назначают встречу с клиентом для сбора информации такой как — что клиент хочет получить в итоге,
кто будет конечным пользователем, какая цель продукта. Перед созданием продукта очень важно понимание или знание продукта.
Пример,  Клиент желает получить приложение которое включает перевод денег.
В данном случае, требования должны содержать информацию о типе транзакции,
каким образом совершать транзакцию, в какой валюте совершать перевод и другое.
Как только сбор требований завершен, аналитик проверяет требования на предмет реализуемости разработки.
В случае выявления неточностей или двусмысленности, назначается повторная встреча с клиентом для обсуждения.
Как только требования ясно представлены и поняты создается SRS (Software Requirement Specification)
или Спецификация требований программного обеспечения. Данный документ должен быть тщательно изучен и правильно понят разработчиками и самим клиентом.

2. Планирование. На этом этапе мы отвечаем на вопрос «Что мы хотим сделать?».
На данном этапе, требования зафиксированные в Спецификации используются как исходные данные для создания архитектуры,
которая используется при разработке приложения.

3. Программирование
Программирование начинается как только разработчик получил документ с архитектурой продукта.
Дизайн ПО интерпретируется в код. На данном этапе создаются все компоненты ПО.

4. Тестирование
Тестирование начинается как только завершено программирование и модули готовы для тестирования.
На данном этапе, разработанное ПО тщательно тестируется и все найденные баги передаются команде разработчиков для исправления.

Повторное тестирование, регрессионное тестирование производится когда ПО полность соответствует ожиданиями заказчика.
Тестировщики сверяют Спецификацию и созданный продукт,  чтоб убедиться что ПО соответствует ожиданиям заказчика.

5. Установка и Поддержка

Как только продукт протестирован, он устанавливается в рабочей среде заказчика для проведения приемочного тестирования заказчиком.

В случае приемочного тестирования заказчиком, создается копия рабочей среды (моделируются условия)
и заказчик вместе с разработчиками проводит тестирование.
Если заказчик по итогам тестирования принимает приложение как соответствующее спецификации,
то подписываются документы на запуск приложения.

После ввода ПО в эксплуатацию, осуществляется поддержка продукта т.е.
если возникает какая-либо проблема, которую необходимо исправить, или необходимо внести какие-либо улучшения,
разработчики займутся этим.

# Какие этапы тестирования вы можете перечислить?

    Анализ требований
    Планирование тестирования
    Тест-дизайн
    Запуск тестов
    Редактирование тестов
    Регрессионное тестирование
    Приемочные испытания
    Эксплуатация и сопровождение
    Анализ результатов

# Что такое регрессионное тестирование?

Регрессионное тестирование — это вид тестирования направленный на проверку изменений,
сделанных в приложении или окружающей среде (починка дефекта, слияние кода, миграция на другую операционную систему,
базу данных, веб сервер или сервер приложения),
для подтверждения того факта, что существующая ранее функциональность работает как и прежде.
Регрессионными могут быть как функциональные, так и нефункциональные тесты.


# Что такое смоук тест?

Cмоук тест - в тестировании программного обеспечения означает минимальный набор тестов на явные ошибки.
Дымовой тест обычно выполняется программистом; не проходившую этот тест программу не имеет смысла отдавать на более глубокое тестирование.

# Какие уровни тестирования вы знаете? Что тестируется на каждом из них?

Выделяют 4 основных уровня тестирования:
1. Компонентное/модульное тестирование (Component/Unit Testing). Модульное тестирование направлено
на тестирование отдельных модулей и компонентов программы, которые изолированы от других модулей и компонентов.
2. Интеграционное тестирование (Integration Testing). Интеграционное тестирование необходимо для того ,
чтобы тестировать взаимосвязь между чем-либо.
3. Системное тестирование (System Testing).Системное тестирование — это тестирование более высокого уровня.
При системном тестировании наша задача состоит в том, чтобы убедиться в корректности работы в целом всей системы.
Программа в этом случае должна быть максимально приближена к конечному результату. Наше внимание должно быть сосредоточено на общем поведении системы
с точки зрения конечных пользователей.
4. Приемочное тестирование (Acceptance Testing).
Этот уровень тестирования используется для подтверждения готовности продукта и проводится преимущественно в самом конце цикла разработки программы.

У приемочного тестирования есть также несколько целей:
1. Показать, что программа завершена и готова к использованию так, как от нее ожидалось.
2. Проверить, что работа программы соответствует установленному ТЗ или требованиям.

# Расскажите об основных особенностях Agile методологии (кратко).

Agile - гибкая методология разработки (англ. гибкий) – серия подходов к разработке ПО,
ориентированных на использование итеративной инкрементальной разработки,
динамическое формирование требований и обеспечение их реализации
в результате постоянного взаимодействия внутри самоорганизующихся рабочих групп,
состоящих из специалистов различного профиля

# Какими характеристиками должны обладать хорошие требования?

Требования (requirements) - описание того, какие функции и с соблюдением каких условий
должно выполнять приложение в процессе решения полезной для пользователя задачи.
Требования должны быть независимы от внутренней архитектуры приложения, т.е. должны описывать то,
что необходимо заказчику без деталей реализации (принцип «what, not how»). Правда, бывают исключения в виде ограничений,
например, на операционную систему.

Характеристики хороших требований:
    Полнота
    Однозначность
    Корректность
    Непротиворечивость
    Необходимость
    Осуществимость
    Проверяемость
