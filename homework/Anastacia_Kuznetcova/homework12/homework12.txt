1) Что такое тестирование ПО?
Тестирование - это процесс оценки системы или ее компонентов с намерением определить, удовлетворяет ли она указанным требованиям или нет.
Простыми словами, тестирование выполняет систему, чтобы идентифицировать любые пробелы, ошибки, отсутствующие требования в противоположность фактическим требованиям.

2) Этапы SDLC, что значит каждый из них?
SDLC – это жизненный цикл разработки ПО. Он представляет собой 7 фаз, которые проходит любое ПО. 
Проще говоря, это подробный план, показывающий, как разрабатывать ПО, поддерживать его, изменять и улучшать.
1) Анализ, составление требований к продукту:отвечает на вопрос «Какие проблемы требуют решений?»
Жизненный цикл разработки ПО начинается со стадии анализа, во время которого участники процесса обсуждают требования, предъявляемые к конечному продукту.
Главная цель это определение детальных требований к системе. 
2) Планирование:отвечает на вопрос «Что мы хотим сделать?»
Результатом рассмотрения является определение различных технических подходов, которые можно использовать для успешной реализации проекта с минимальными рисками.
3) Проектирование и дизайн.
Проектирование и дизайн отвечает на вопрос «Как мы добьемся наших целей?»
На стадии проектирования и дизайна программисты и системные архитекторы, руководствуясь требованиями, разрабатывают дизайн системы.
Разнообразные технические вопросы, возникающие в процессе проектирования, обсуждаются со всеми заинтересованными сторонами, включая заказчика.
Определяются технологии, которые будут использоваться в проекте, загрузка команды, ограничения, временные рамки и бюджет.
В соответствии с требованиями выбираются наиболее подходящие проектные решения.
Утвержденный дизайн системы определяет список разрабатываемых программных компонентов, взаимодействие с третьими сторонами, функциональные характеристики программы, используемые базы данных и многое другое. 
4) Разработка.
Разработка ПО регулирует процесс создания продукта.
Разработчики получают требования, спецификацию по дизайну и создают требуемое ПО. 
5) Тестирование. 
Тестирование регулирует обеспечение качественной работы продукта и производят проверку качества ПО.
Если находятся отклонения от требований и ошибки — они оформляются в виде отчетов о дефектах, исправляются и перепроверяются. 
Процесс продолжается до тех пор, пока качество продукта не будет доведено до приемлемого уровня.
6) Развертывание, эксплуатация.
Развертывание регулирует использование финального продукта.
После успешного тестирования готовый продукт передается заказчику. 
Кроме передачи может производится настройка рабочих окружений, установка, конфигурация и запуск продукта.
7) Поддержка. После запуска продукта он начинает развиваться, изменяться, дополняться новыми функциями.
Поддержку можно представить как повторяющуюся цепочку шагов “Определение новых требований” -> “Разработка” -> “Тестирование” -> “Развертывание”.

3) Какие этапы тестирования вы можете перечислить?
1) Тестирование функционала
Функциональное тестирование проводится с целью выявить, все ли реализуемо в программе и работает ли она, как задумывалось.
Если заявленной вами функции не хватает, то программа будет не в состоянии выполнять задачи пользователей и они не получат ожидаемый результат.
2) Тестирование удобства и простоты
ТУИП программы производится чтобы узнать, комфортно ли клиенту использовать программу.
3) Тестирование интерфейса
ТИ производится для выявления ошибок во внешнем виде программы и их последующего исправления.
4) Тестирование совместимости
ТС позволяет узнать, может ли программа работать вместе с другими программами и устройствами.
5) Тестирование производительности
ТП производится чтобы узнать, насколько хорошо программа работает при высоких нагрузках на нее внутренними подсистемами программы, внешними сервисами, количеством подключений пользователей и т.п. 
Обычно для тестирования производительности проводится высокая нагрузка на программу, что должно привести к нарушениям в работе ее функционала.
После этого разработчики устраняют ошибки в местах, которые больше всего подвержены нагрузке.
6) Тестирование безопасности
ТБ программы проводится чтобы найти уязвимые места, которые могут стать лакомым куском для злоумышленников. 
Своевременное нахождение ошибок в системе безопасности помогут защитить программу от несанкционированного доступа и действий других вредоносных программ.

4) Что такое регрессионное тестирование?
Регрессионное тестирование — это проверка ранее протестированной программы, позволяющая убедиться, что внесенные изменения не повлекли за собой появления дефектов в той части программы, которая не менялась.

5) Что такое смоук тест?
Тестирование, проводимое на начальном этапе и в первую очередь направленное на проверку готовности разработанного продукта к проведению более расширенного тестирования, определения общего состояния качества продукта.
Это короткий цикл тестов, подтверждающий (отрицающий) факт того, что приложение стартует и выполняет свои основные функции.
Данный тип тестирования позволяет на начальном этапе выявить основные быстро находимые критические дефекты.

6) Какие уровни тестирования вы знаете? Что тестируется на каждом из них?
1) Модульное тестирование применяется для исследования каждого отдельного элемента или объекта системы. 
Чтобы найти баги, применяя модульное тестирование, нужно знать, как устроена программа в целом и какой функционал каждого отдельного модуля. 
Этот уровень тестирования используется больше программистами, нежели тестировщиками.
Они создают специальные тест-коды, с помощью которых можно проверить, выполняет ли программное обеспечение свое предназначение.
2) Во интеграционного тестировании проверяют, как отдельные модули взаимодействуют вместе, то есть интегрируясь друг с другом.
Интеграционное тестирование наиболее подходит для поиска багов в разработке интерфейса системы. 
И чаще всего в этом уровне тестирования используют подход «сверху вниз», когда систему проверяют по архитектурному строению.
3) Системное тестирование. Название уровня говорит само за себя – проверяется вся система целостно на наличие в ней багов. 
В системном тестировании тестировщик проверяет взаимосвязь между всеми аппаратными и программными компонентами системы и потом тестирует уже методику работы всей системы.
4) Приемочное тестирование. Этот уровень тестирования используют уже почти перед непосредственной передачей программного обеспечения заказчику.
Его используют, чтобы проверить соответствует ли разработанный продукт тем требованиям, которые выдвигал заказчик.
Приемочное тестирование может осуществляться командой разработчиков, его еще называют внутреннее тестирование.
Второй вариант или внешнее приемочное тестирование, когда программное обеспечение тестирует сам заказчик.
5) Тестирование методом черного ящика. Оно подразумевает исследование работы программного обеспечения с точки зрения пользователя и не предполагает знаний о том, как устроена и работает внутренняя система.
6) Тестирование методом белого ящика. Этот метод тестирования уже базируется на знаниях внутреннего функционирования системы. Тестировщик должен знать, как работает код, чтобы выявить, где находятся баги.
7) Тестирование методом серого ящика. Для выполнения этого метода тестирования предполагает понимание о внутреннем устройстве программного обеспечения, но тестирование проводиться с точки зрения конечного пользователя.

7) Расскажите об основных особенностях Agile методологии (кратко).
Методология управления Agile — это не что иное, как итеративный подход для разработки программного обеспечения и реализации IT-проекта. 
То есть компания делает проект поэтапно, маленькими шагами и с самого начала, а не показывает готовый продукт непосредственно в конце. 
Это способ управления проектами, при котором успех проекта достигается благодаря использованию ценностей и принципов Agile. Менеджеры проектов руководствуются в своей работе 4 ценностями и 12 принципами.

4 ценности:
1) люди
2) работающий продукт
3) сотрудничество с заказчиком
4) готовность к изменениям

12 принципов Agile:
1) Удовлетворять потребности клиентов
2) Корректировать требования к продукту или проекту в ходе разработки
3) Своевременно выполнять работу
4) Мотивировать и поддерживать тех, кто вовлечен в проект
5) Обеспечивать взаимодействие между разработчиками
6) Измерять прогресс
7) Поддерживать нужный темп работы, чтобы сроки сдачи проекта не сдвигались в большую сторону
8) Уделять внимание техническим деталям и дизайну
9) Делать рабочий процесс простым и понятным
10) Позволять участникам проекта принимать решения
11) Адаптироваться к изменяющейся среде
12) Поддерживать сотрудничество между заказчиком и исполнителем.

8) Характеристики хороших требований:
1) Недвусмысленность
2) Проверяемость
3) Четкость (краткость)
4) Точность
5) Понятность
6) Осуществимость
7) Независимость
8) Атомарность
9) Необходимость
10) Абстрактность.













